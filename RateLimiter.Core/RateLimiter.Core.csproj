<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>

        <!-- NuGet identity -->
        <PackageId>RedGate.RedisRateLimiter</PackageId>
        <Version>1.0.0</Version>
        <Authors>Alikeb</Authors>
        <Company>Alikeb</Company>
        <Description>Attribute-based, distributed, hybrid rate limiter for ASP.NET Core</Description>
        <PackageTags>aspnetcore;ratelimit;redis;middleware;dotnet8;token-bucket;sliding-window;fixed-window</PackageTags>

        <!-- Repo metadata (helps SourceLink & NuGet page) -->
        <RepositoryUrl>https://github.com/alikeb1998/RateLimiter/</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PackageProjectUrl>https://github.com/alikeb1998/RateLimiter/</PackageProjectUrl>

        <!-- License + README shown on NuGet.org -->
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageReadmeFile>README.md</PackageReadmeFile>

        <!-- Pack settings -->
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        <ContinuousIntegrationBuild Condition="'$(CI)' != ''">true</ContinuousIntegrationBuild>
    </PropertyGroup>

    <!-- ASP.NET Core shared framework (filters, HttpOverrides, etc.) -->
    <ItemGroup>
        <FrameworkReference Include="Microsoft.AspNetCore.App" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="StackExchange.Redis" Version="2.6.90" />
        <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="All" />
    </ItemGroup>

    <!-- Ship Lua scripts and have them copied to consumer app's output (contentFiles) -->
    <ItemGroup>
        <!-- For *this* project’s own output (debugging/local run) -->
        <None Update="LuaScripts\**\*.lua">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>

        <!-- For the NuGet package: include as contentFiles and copy to output of *consuming* app -->
        <Content Include="LuaScripts\**\*.lua">
            <Pack>true</Pack>
            <PackagePath>contentFiles\any\any\LuaScripts\</PackagePath>
            <BuildAction>Content</BuildAction>
            <CopyToOutput>true</CopyToOutput>
        </Content>

        <!-- README + LICENSE into the nupkg root -->
        <None Include="README.md" Pack="true" PackagePath="\" />
    </ItemGroup>

</Project>
